#include <zen/bones/bones_framework.hh>

///
///////////////////////////////////////////////////////////////////////////////////////////////////
///////////////////////////////////////////////////////////////////////////////////////////////////
///

zen::bones::framework_connection::~framework_connection()
{
    auto coupling = _coupling.lock();

    if( !coupling )
        return;

    coupling->owner(
        nullptr
    );
}

///
///////////////////////////////////////////////////////////////////////////////////////////////////
///////////////////////////////////////////////////////////////////////////////////////////////////
///

void
zen::bones::framework_connection::dispatch(
    const std::string &tag_,
    const std::string &payload_
) const
{
    auto coupling = _coupling.lock();

    if( !coupling )
    {
        return;
    }

    coupling->dispatch(
        tag_,
        payload_
    );
}

///
///////////////////////////////////////////////////////////////////////////////////////////////////
///////////////////////////////////////////////////////////////////////////////////////////////////
///

void
zen::bones::framework_connection::callback(
    const std::string &name_
) const
{
    auto coupling = _coupling.lock();

    if( !coupling )
        return;

    coupling->callback(
        name_
    );
}

///
///////////////////////////////////////////////////////////////////////////////////////////////////
///////////////////////////////////////////////////////////////////////////////////////////////////
///

zen::bones::framework_connection_shared
zen::bones::framework_connection::spawn(
    const std::string &service_name_
) const
{
    return _spawn_function(
        service_name_
    );
}

///
///////////////////////////////////////////////////////////////////////////////////////////////////

